#!/bin/bash

function help() {
  # Prints help to console
  exitStatus="0"
  [ -n "$1" ] && exitStatus="$1"

  echo "Usage: $0 [-h] [-m NUM] dir"
  echo "-h      ... prints this message"
  echo "-f      ... forces actions, does not ack for deletion confirmation"
  echo "-m NUM  ... keep max last NUM of backups, delete older"
  echo "dir     ... directory in which the backup will be created"

  exit "$exitStatus"
}


# Parse command line arguments
maxBackups="INF"
actionForce="0"

while getopts ":hfm:" o; do
    case "${o}" in
        m)
            maxBackups="$OPTARG"
            { [ -n "$maxBackups" ] && [ "$maxBackups" -eq "$maxBackups" ]; } || help 1
            ;;
        f)
            actionForce="1"
            ;;
        h)
            help
            ;;
        *)
            help 1
            ;;
    esac
done
shift $((OPTIND-1))

backupRootDir="$1"

[ -z "$backupRootDir" ] && help 1

function fail() {
  # Prints error to stderr and exits with status 1
  echo "ERR: $1" >&2
  exit 1
}

function q-yes-no {
  question="$1"
  while true; do
    read -rp "$question [y/n]: " r
    case "$r" in
        [Yy]*) return 0  ;;
        [Nn]*) echo "Aborted" ; return  1 ;;
    esac
  done
}

function delete-old-backups() {
  # Deletes old backup so to keep up to "$maxBackups" backups
  if [[ "$maxBackups" == "INF" ]]; then
    # keep infinity backups
    return
  fi
  # shellcheck disable=SC2010
  backupDates="$(ls -d -- */ | grep -E "[0-9]{8}-[0-9]{6}" | sed -Ee 's|^(.*)/$|\1|' | sort)" || fail "Cannot find backup dates"
  backupsCount="$(echo "$backupDates" | wc -l)"
  echo "Found $backupsCount backups, maximum is $maxBackups"

  if [ "$backupsCount" -le "$maxBackups" ]; then
    return
  fi

  backupsToDelete="$(echo "$backupDates" | head -n "-${maxBackups}")"
  backupsToKeep="$(echo "$backupDates" | tail -n "${maxBackups}")"
  echo "Will delete following backups:"
  echo "$backupsToDelete" | sed -Ee "s/^(.*)$/- \1/"
  echo "And keep:"
  echo "$backupsToKeep" | sed -Ee "s/^(.*)$/- \1/"

  [ "$actionForce" -eq "1" ] || q-yes-no "Do you want to delete old backups?" || {
    exit 2
  }

  echo "Deleting old backups:"
  while read -r folder; do
    echo -n "- $folder ... "
    rm -rf "$folder" || fail "Could not delete"
    echo "done"
  done <<< "$backupsToDelete"
}

function backup-prepare() {
  cd "$backupRootDir" || fail "Cannot cd to $backupRootDir"
  echo "Working in $backupRootDir"
  backupDir="$(date +'%Y%m%d-%H%M%S')"
  [ -e "$backupDir" ] && fail "$backupDir already exists!"
  # shellcheck disable=SC2166
  if [ -e "latest" -o -L "latest" ]; then
    echo "Copying from latest to $backupDir"
    cp -lr "latest" "$backupDir" || fail "Copying last latest failed"
    rm "latest" || fail "Cannot remove latest"
  else
    echo "First init, creating $backupDir"
    mkdir "$backupDir" || fail "Cannot create backup dir $backupDir"
  fi
  echo "Linking $backupDir to latest"
  ln -s "$backupDir" "latest" || fail "Linking new latest failed"
  delete-old-backups
}

( backup-prepare; )
